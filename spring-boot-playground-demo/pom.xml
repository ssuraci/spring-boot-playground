<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>it.sebastianosuraci.springboot</groupId>
		<artifactId>spring-boot-playground-bom</artifactId>
		<version>0.2.0</version>
		<relativePath>../spring-boot-playground-bom/</relativePath>
	</parent>
	<artifactId>spring-boot-playground-demo</artifactId>
	<name>spring-boot-playground-demo</name>
	<description>Demo project for Spring Boot</description>
	<packaging>jar</packaging>
	<properties>
		<docker.image>ssuraci/spring-boot-playground-demo</docker.image>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
		</dependency>


		<dependency>
			<groupId>it.sebastianosuraci.springboot</groupId>
			<artifactId>spring-boot-playground-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.querydsl/querydsl-jpa -->
		<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.cosium.spring.data/spring-data-jpa-entity-graph -->
		<dependency>
			<groupId>com.cosium.spring.data</groupId>
			<artifactId>spring-data-jpa-entity-graph</artifactId>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.playtika.testcontainers/embedded-postgresql -->
		<dependency>
			<groupId>com.playtika.testcontainers</groupId>
			<artifactId>embedded-postgresql</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc -->
		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter</artifactId>
			<version>${spring.cloud.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
			<version>${spring.cloud.version}</version>
			<scope>test</scope>
		</dependency>
<!-- https://mvnrepository.com/artifact/com.amazonaws.serverless/aws-serverless-java-container-springboot2 -->
		<dependency>
			<groupId>com.amazonaws.serverless</groupId>
			<artifactId>aws-serverless-java-container-springboot2</artifactId>
			<version>1.6.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.amazonaws/aws-lambda-java-runtime-interface-client -->
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-lambda-java-runtime-interface-client</artifactId>
			<version>2.1.0</version>
		</dependency>
		<dependency>
			<groupId>jakarta.annotation</groupId>
			<artifactId>jakarta.annotation-api</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!--
			<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/generated-sources/java</outputDirectory>
							<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>com.querydsl</groupId>
						<artifactId>querydsl-apt</artifactId>
						<version>${querydsl.version}</version>
						<classifier>jakarta</classifier>
					</dependency>
					<dependency>
						<groupId>com.querydsl</groupId>
						<artifactId>querydsl-jpa</artifactId>
						<classifier>apt</classifier>
						<version>${querydsl.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		-->
			<plugin>
				<groupId>org.graalvm.buildtools</groupId>
				<artifactId>native-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.liquibase</groupId>
				<artifactId>liquibase-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<configuration>
					<to>
						<image>${docker.image}</image>
					</to>
				</configuration>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
	</build>
	<profiles>
		<profile>
			<id>dev-pgsql</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<datasource.driverClassName>org.postgresql.Driver</datasource.driverClassName>
				<datasource.url>jdbc:postgresql://localhost:54321/spring_boot_playground_demo_db</datasource.url>
				<datasource.dialect>org.hibernate.dialect.PostgreSQLDialect</datasource.dialect>
				<datasource.username>postgres</datasource.username>
				<datasource.password>postgres</datasource.password>
				<liquibase.enabled>true</liquibase.enabled>
				<context.path>/</context.path>
			</properties>
		</profile>
		<profile>
			<id>server</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<datasource.driverClassName>org.postgresql.Driver</datasource.driverClassName>
				<datasource.url>jdbc:postgresql://localhost:5432/spring_boot_playground_demo_db</datasource.url>
				<datasource.dialect>org.hibernate.dialect.PostgreSQLDialect</datasource.dialect>
				<datasource.username>playground</datasource.username>
				<datasource.password>playground</datasource.password>
				<liquibase.enabled>true</liquibase.enabled>
				<context.path>/</context.path>
			</properties>
		</profile>
		<profile>
			<id>native</id>
			<properties>
				<datasource.driverClassName>org.postgresql.Driver</datasource.driverClassName>
				<!-- <datasource.url>jdbc:postgresql://localhost:54321/spring_boot_playground_demo_db</datasource.url> -->
				<datasource.url>jdbc:postgresql://spring-boot-playground-pgsql-db:5432/spring_boot_playground_demo_db</datasource.url>
				<datasource.dialect>org.hibernate.dialect.PostgreSQLDialect</datasource.dialect>
				<datasource.username>postgres</datasource.username>
				<datasource.password>postgres</datasource.password>
				<liquibase.enabled>false</liquibase.enabled>
				<context.path>/</context.path>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<image>
								<builder>paketobuildpacks/builder:tiny</builder>
								<env>
									<BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
								</env>
							</image>
						</configuration>
						<executions>
							<execution>
								<id>process-aot</id>
								<goals>
									<goal>process-aot</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.graalvm.buildtools</groupId>
						<artifactId>native-maven-plugin</artifactId>
						<configuration>
							<classesDirectory>${project.build.outputDirectory}</classesDirectory>
							<metadataRepository>
								<enabled>true</enabled>
							</metadataRepository>
							<requiredVersion>22.3</requiredVersion>
						</configuration>
						<executions>
							<execution>
								<id>add-reachability-metadata</id>
								<goals>
									<goal>add-reachability-metadata</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
	
		</profile>
		<profile>
			<id>docker</id>
			<properties>
				<datasource.driverClassName>${DATASOURCE_DRIVER_CLASS_NAME}</datasource.driverClassName>
				<datasource.url>${DATASOURCE_URL}</datasource.url>
				<datasource.dialect>${DATASOURCE_DIALECT}</datasource.dialect>
				<datasource.username>${DATASOURCE_USERNAME}</datasource.username>
				<datasource.password>${DATASOURCE_PASSWORD}</datasource.password>
				<liquibase.enabled>${LIQUIBASE_ENABLED}</liquibase.enabled>
				<context.path>/</context.path>
			</properties>
		</profile>
		<profile>
			<id>aws-lambda</id>
			<properties>
				<datasource.driverClassName>${DATASOURCE_DRIVER_CLASS_NAME}</datasource.driverClassName>
				<datasource.url>${DATASOURCE_URL}</datasource.url>
				<datasource.dialect>${DATASOURCE_DIALECT}</datasource.dialect>
				<datasource.username>${DATASOURCE_USERNAME}</datasource.username>
				<datasource.password>${DATASOURCE_PASSWORD}</datasource.password>
				<spring-boot.repackage.skip>true</spring-boot.repackage.skip>
				<liquibase.enabled>${LIQUIBASE_ENABLED}</liquibase.enabled>
				<context.path>${CONTEXT_PATH}</context.path>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>3.2.4</version>
						<configuration>
							<createDependencyReducedPom>false</createDependencyReducedPom>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
							</execution>
						</executions>
					</plugin>		
				</plugins>
			</build>
		</profile>
		<profile>
			<id>dev-mssql</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<datasource.driverClassName>com.microsoft.sqlserver.jdbc.SQLServerDriver</datasource.driverClassName>
				<datasource.url>jdbc:sqlserver://localhost:14330;databaseName=master</datasource.url>
				<datasource.username>sa</datasource.username>
				<datasource.password>Pass@word</datasource.password>
				<datasource.dialect>org.hibernate.dialect.SQLServerDialect</datasource.dialect>
				<liquibase.enabled>true</liquibase.enabled>
				<context.path>/</context.path>
			</properties>
		</profile>

	</profiles>


</project>

<!-- 
$ export GRAALVM_HOME="/home/seba/Downloads/graalvm-ce-java17-22.3.0"
$ export PATH="/home/seba/Downloads/graalvm-ce-java17-22.3.0/bin:$PATH"
$ export JAVA_HOME="/home/seba/Downloads/graalvm-ce-java17-22.3.0"
-->